// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.m4.bgw.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.m4.bgw.Boardgame;
import org.m4.bgw.Language;
import org.m4.bgw.domain.GameTranslation;
import org.m4.bgw.domain.GameTranslationDataOnDemand;
import org.m4.bgw.domain.GameTranslationPK;
import org.springframework.stereotype.Component;

privileged aspect GameTranslationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GameTranslationDataOnDemand: @Component;
    
    private Random GameTranslationDataOnDemand.rnd = new SecureRandom();
    
    private List<GameTranslation> GameTranslationDataOnDemand.data;
    
    public GameTranslation GameTranslationDataOnDemand.getNewTransientGameTranslation(int index) {
        GameTranslation obj = new GameTranslation();
        setEmbeddedIdClass(obj, index);
        setBoardgameId(obj, index);
        setLanguageCode(obj, index);
        setName(obj, index);
        setRules(obj, index);
        setRulesLink(obj, index);
        return obj;
    }
    
    public void GameTranslationDataOnDemand.setEmbeddedIdClass(GameTranslation obj, int index) {
        Integer boardgameId = new Integer(index);
        String languageCode = "l_" + index;
        if (languageCode.length() > 3) {
            languageCode = new Random().nextInt(10) + languageCode.substring(1, 3);
        }
        
        GameTranslationPK embeddedIdClass = new GameTranslationPK(boardgameId, languageCode);
        obj.setId(embeddedIdClass);
    }
    
    public void GameTranslationDataOnDemand.setBoardgameId(GameTranslation obj, int index) {
        Boardgame boardgameId = null;
        obj.setBoardgameId(boardgameId);
    }
    
    public void GameTranslationDataOnDemand.setLanguageCode(GameTranslation obj, int index) {
        Language languageCode = null;
        obj.setLanguageCode(languageCode);
    }
    
    public void GameTranslationDataOnDemand.setName(GameTranslation obj, int index) {
        String name = "name_" + index;
        if (name.length() > 100) {
            name = name.substring(0, 100);
        }
        obj.setName(name);
    }
    
    public void GameTranslationDataOnDemand.setRules(GameTranslation obj, int index) {
        String rules = "rules_" + index;
        obj.setRules(rules);
    }
    
    public void GameTranslationDataOnDemand.setRulesLink(GameTranslation obj, int index) {
        String rulesLink = "rulesLink_" + index;
        if (rulesLink.length() > 255) {
            rulesLink = new Random().nextInt(10) + rulesLink.substring(1, 255);
        }
        obj.setRulesLink(rulesLink);
    }
    
    public GameTranslation GameTranslationDataOnDemand.getSpecificGameTranslation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        GameTranslation obj = data.get(index);
        GameTranslationPK id = obj.getId();
        return GameTranslation.findGameTranslation(id);
    }
    
    public GameTranslation GameTranslationDataOnDemand.getRandomGameTranslation() {
        init();
        GameTranslation obj = data.get(rnd.nextInt(data.size()));
        GameTranslationPK id = obj.getId();
        return GameTranslation.findGameTranslation(id);
    }
    
    public boolean GameTranslationDataOnDemand.modifyGameTranslation(GameTranslation obj) {
        return false;
    }
    
    public void GameTranslationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = GameTranslation.findGameTranslationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'GameTranslation' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<GameTranslation>();
        for (int i = 0; i < 10; i++) {
            GameTranslation obj = getNewTransientGameTranslation(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
