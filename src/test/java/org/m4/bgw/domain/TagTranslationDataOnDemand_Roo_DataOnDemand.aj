// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.m4.bgw.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.m4.bgw.Language;
import org.m4.bgw.domain.GameTag;
import org.m4.bgw.domain.GameTagDataOnDemand;
import org.m4.bgw.domain.TagTranslation;
import org.m4.bgw.domain.TagTranslationDataOnDemand;
import org.m4.bgw.domain.TagTranslationPK;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TagTranslationDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TagTranslationDataOnDemand: @Component;
    
    private Random TagTranslationDataOnDemand.rnd = new SecureRandom();
    
    private List<TagTranslation> TagTranslationDataOnDemand.data;
    
    @Autowired
    GameTagDataOnDemand TagTranslationDataOnDemand.gameTagDataOnDemand;
    
    public TagTranslation TagTranslationDataOnDemand.getNewTransientTagTranslation(int index) {
        TagTranslation obj = new TagTranslation();
        setEmbeddedIdClass(obj, index);
        setLanguageCode(obj, index);
        setName(obj, index);
        setTagName(obj, index);
        return obj;
    }
    
    public void TagTranslationDataOnDemand.setEmbeddedIdClass(TagTranslation obj, int index) {
        String tagName = "tagName_" + index;
        if (tagName.length() > 20) {
            tagName = new Random().nextInt(10) + tagName.substring(1, 20);
        }
        String languageCode = "l_" + index;
        if (languageCode.length() > 3) {
            languageCode = new Random().nextInt(10) + languageCode.substring(1, 3);
        }
        
        TagTranslationPK embeddedIdClass = new TagTranslationPK(tagName, languageCode);
        obj.setId(embeddedIdClass);
    }
    
    public void TagTranslationDataOnDemand.setLanguageCode(TagTranslation obj, int index) {
        Language languageCode = null;
        obj.setLanguageCode(languageCode);
    }
    
    public void TagTranslationDataOnDemand.setName(TagTranslation obj, int index) {
        String name = "name_" + index;
        if (name.length() > 20) {
            name = name.substring(0, 20);
        }
        obj.setName(name);
    }
    
    public void TagTranslationDataOnDemand.setTagName(TagTranslation obj, int index) {
        GameTag tagName = gameTagDataOnDemand.getRandomGameTag();
        obj.setTagName(tagName);
    }
    
    public TagTranslation TagTranslationDataOnDemand.getSpecificTagTranslation(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        TagTranslation obj = data.get(index);
        TagTranslationPK id = obj.getId();
        return TagTranslation.findTagTranslation(id);
    }
    
    public TagTranslation TagTranslationDataOnDemand.getRandomTagTranslation() {
        init();
        TagTranslation obj = data.get(rnd.nextInt(data.size()));
        TagTranslationPK id = obj.getId();
        return TagTranslation.findTagTranslation(id);
    }
    
    public boolean TagTranslationDataOnDemand.modifyTagTranslation(TagTranslation obj) {
        return false;
    }
    
    public void TagTranslationDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = TagTranslation.findTagTranslationEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'TagTranslation' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<TagTranslation>();
        for (int i = 0; i < 10; i++) {
            TagTranslation obj = getNewTransientTagTranslation(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
