// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.m4.bgw.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.m4.bgw.Boardgame;
import org.m4.bgw.domain.AvgGameLength;
import org.m4.bgw.domain.AvgGameLengthDataOnDemand;
import org.m4.bgw.domain.AvgGameLengthPK;
import org.m4.bgw.domain.TimeLimit;
import org.m4.bgw.domain.TimeLimitDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AvgGameLengthDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AvgGameLengthDataOnDemand: @Component;
    
    private Random AvgGameLengthDataOnDemand.rnd = new SecureRandom();
    
    private List<AvgGameLength> AvgGameLengthDataOnDemand.data;
    
    @Autowired
    TimeLimitDataOnDemand AvgGameLengthDataOnDemand.timeLimitDataOnDemand;
    
    public AvgGameLength AvgGameLengthDataOnDemand.getNewTransientAvgGameLength(int index) {
        AvgGameLength obj = new AvgGameLength();
        setEmbeddedIdClass(obj, index);
        setAvgLengthMinutes(obj, index);
        setBoardgameId(obj, index);
        setTimeLimitId(obj, index);
        return obj;
    }
    
    public void AvgGameLengthDataOnDemand.setEmbeddedIdClass(AvgGameLength obj, int index) {
        Integer boardgameId = new Integer(index);
        Integer timeLimitId = new Integer(index);
        
        AvgGameLengthPK embeddedIdClass = new AvgGameLengthPK(boardgameId, timeLimitId);
        obj.setId(embeddedIdClass);
    }
    
    public void AvgGameLengthDataOnDemand.setAvgLengthMinutes(AvgGameLength obj, int index) {
        Short avgLengthMinutes = new Integer(index).shortValue();
        obj.setAvgLengthMinutes(avgLengthMinutes);
    }
    
    public void AvgGameLengthDataOnDemand.setBoardgameId(AvgGameLength obj, int index) {
        Boardgame boardgameId = null;
        obj.setBoardgameId(boardgameId);
    }
    
    public void AvgGameLengthDataOnDemand.setTimeLimitId(AvgGameLength obj, int index) {
        TimeLimit timeLimitId = timeLimitDataOnDemand.getRandomTimeLimit();
        obj.setTimeLimitId(timeLimitId);
    }
    
    public AvgGameLength AvgGameLengthDataOnDemand.getSpecificAvgGameLength(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        AvgGameLength obj = data.get(index);
        AvgGameLengthPK id = obj.getId();
        return AvgGameLength.findAvgGameLength(id);
    }
    
    public AvgGameLength AvgGameLengthDataOnDemand.getRandomAvgGameLength() {
        init();
        AvgGameLength obj = data.get(rnd.nextInt(data.size()));
        AvgGameLengthPK id = obj.getId();
        return AvgGameLength.findAvgGameLength(id);
    }
    
    public boolean AvgGameLengthDataOnDemand.modifyAvgGameLength(AvgGameLength obj) {
        return false;
    }
    
    public void AvgGameLengthDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = AvgGameLength.findAvgGameLengthEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'AvgGameLength' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<AvgGameLength>();
        for (int i = 0; i < 10; i++) {
            AvgGameLength obj = getNewTransientAvgGameLength(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
