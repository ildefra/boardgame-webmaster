// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.m4.bgw.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.m4.bgw.domain.Publisher;
import org.m4.bgw.domain.PublisherDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect PublisherDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PublisherDataOnDemand: @Component;
    
    private Random PublisherDataOnDemand.rnd = new SecureRandom();
    
    private List<Publisher> PublisherDataOnDemand.data;
    
    public Publisher PublisherDataOnDemand.getNewTransientPublisher(int index) {
        Publisher obj = new Publisher();
        setLogo(obj, index);
        setWebsite(obj, index);
        return obj;
    }
    
    public void PublisherDataOnDemand.setLogo(Publisher obj, int index) {
        byte[] logo = String.valueOf(index).getBytes();
        obj.setLogo(logo);
    }
    
    public void PublisherDataOnDemand.setWebsite(Publisher obj, int index) {
        String website = "website_" + index;
        if (website.length() > 255) {
            website = new Random().nextInt(10) + website.substring(1, 255);
        }
        obj.setWebsite(website);
    }
    
    public Publisher PublisherDataOnDemand.getSpecificPublisher(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Publisher obj = data.get(index);
        String id = obj.getName();
        return Publisher.findPublisher(id);
    }
    
    public Publisher PublisherDataOnDemand.getRandomPublisher() {
        init();
        Publisher obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getName();
        return Publisher.findPublisher(id);
    }
    
    public boolean PublisherDataOnDemand.modifyPublisher(Publisher obj) {
        return false;
    }
    
    public void PublisherDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Publisher.findPublisherEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Publisher' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Publisher>();
        for (int i = 0; i < 10; i++) {
            Publisher obj = getNewTransientPublisher(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
