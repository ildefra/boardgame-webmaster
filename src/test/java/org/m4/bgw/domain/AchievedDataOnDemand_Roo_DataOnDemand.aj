// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.m4.bgw.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.m4.bgw.Boardgame;
import org.m4.bgw.domain.Achieved;
import org.m4.bgw.domain.AchievedDataOnDemand;
import org.m4.bgw.domain.AchievedPK;
import org.m4.bgw.domain.Achievement;
import org.m4.bgw.domain.AchievementDataOnDemand;
import org.m4.bgw.domain.Player;
import org.m4.bgw.domain.PlayerDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect AchievedDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AchievedDataOnDemand: @Component;
    
    private Random AchievedDataOnDemand.rnd = new SecureRandom();
    
    private List<Achieved> AchievedDataOnDemand.data;
    
    @Autowired
    AchievementDataOnDemand AchievedDataOnDemand.achievementDataOnDemand;
    
    @Autowired
    PlayerDataOnDemand AchievedDataOnDemand.playerDataOnDemand;
    
    public Achieved AchievedDataOnDemand.getNewTransientAchieved(int index) {
        Achieved obj = new Achieved();
        setEmbeddedIdClass(obj, index);
        setAchievementId(obj, index);
        setBoardgameId(obj, index);
        setOnDate(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void AchievedDataOnDemand.setEmbeddedIdClass(Achieved obj, int index) {
        String username = "username_" + index;
        if (username.length() > 20) {
            username = new Random().nextInt(10) + username.substring(1, 20);
        }
        Integer boardgameId = new Integer(index);
        Short achievementId = new Integer(index).shortValue();
        
        AchievedPK embeddedIdClass = new AchievedPK(username, boardgameId, achievementId);
        obj.setId(embeddedIdClass);
    }
    
    public void AchievedDataOnDemand.setAchievementId(Achieved obj, int index) {
        Achievement achievementId = achievementDataOnDemand.getRandomAchievement();
        obj.setAchievementId(achievementId);
    }
    
    public void AchievedDataOnDemand.setBoardgameId(Achieved obj, int index) {
        Boardgame boardgameId = null;
        obj.setBoardgameId(boardgameId);
    }
    
    public void AchievedDataOnDemand.setOnDate(Achieved obj, int index) {
        Date onDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setOnDate(onDate);
    }
    
    public void AchievedDataOnDemand.setUsername(Achieved obj, int index) {
        Player username = playerDataOnDemand.getRandomPlayer();
        obj.setUsername(username);
    }
    
    public Achieved AchievedDataOnDemand.getSpecificAchieved(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Achieved obj = data.get(index);
        AchievedPK id = obj.getId();
        return Achieved.findAchieved(id);
    }
    
    public Achieved AchievedDataOnDemand.getRandomAchieved() {
        init();
        Achieved obj = data.get(rnd.nextInt(data.size()));
        AchievedPK id = obj.getId();
        return Achieved.findAchieved(id);
    }
    
    public boolean AchievedDataOnDemand.modifyAchieved(Achieved obj) {
        return false;
    }
    
    public void AchievedDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Achieved.findAchievedEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Achieved' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Achieved>();
        for (int i = 0; i < 10; i++) {
            Achieved obj = getNewTransientAchieved(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
