// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.m4.bgw.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.m4.bgw.Country;
import org.m4.bgw.domain.Gender;
import org.m4.bgw.domain.GenderDataOnDemand;
import org.m4.bgw.domain.Player;
import org.m4.bgw.domain.PlayerDataOnDemand;
import org.m4.bgw.domain.UserLevel;
import org.m4.bgw.domain.UserLevelDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PlayerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PlayerDataOnDemand: @Component;
    
    private Random PlayerDataOnDemand.rnd = new SecureRandom();
    
    private List<Player> PlayerDataOnDemand.data;
    
    @Autowired
    UserLevelDataOnDemand PlayerDataOnDemand.userLevelDataOnDemand;
    
    @Autowired
    GenderDataOnDemand PlayerDataOnDemand.genderDataOnDemand;
    
    public Player PlayerDataOnDemand.getNewTransientPlayer(int index) {
        Player obj = new Player();
        setBio(obj, index);
        setBirthDate(obj, index);
        setCountry(obj, index);
        setEmail(obj, index);
        setIsPremium(obj, index);
        setLevelId(obj, index);
        setPassword(obj, index);
        setRegistrationDtm(obj, index);
        setSex(obj, index);
        return obj;
    }
    
    public void PlayerDataOnDemand.setBio(Player obj, int index) {
        String bio = "bio_" + index;
        obj.setBio(bio);
    }
    
    public void PlayerDataOnDemand.setBirthDate(Player obj, int index) {
        Date birthDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setBirthDate(birthDate);
    }
    
    public void PlayerDataOnDemand.setCountry(Player obj, int index) {
        Country country = null;
        obj.setCountry(country);
    }
    
    public void PlayerDataOnDemand.setEmail(Player obj, int index) {
        String email = "foo" + index + "@bar.com";
        if (email.length() > 90) {
            email = new Random().nextInt(10) + email.substring(1, 90);
        }
        obj.setEmail(email);
    }
    
    public void PlayerDataOnDemand.setIsPremium(Player obj, int index) {
        Boolean isPremium = true;
        obj.setIsPremium(isPremium);
    }
    
    public void PlayerDataOnDemand.setLevelId(Player obj, int index) {
        UserLevel levelId = userLevelDataOnDemand.getRandomUserLevel();
        obj.setLevelId(levelId);
    }
    
    public void PlayerDataOnDemand.setPassword(Player obj, int index) {
        String password = "password_" + index;
        if (password.length() > 20) {
            password = password.substring(0, 20);
        }
        obj.setPassword(password);
    }
    
    public void PlayerDataOnDemand.setRegistrationDtm(Player obj, int index) {
        Date registrationDtm = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setRegistrationDtm(registrationDtm);
    }
    
    public void PlayerDataOnDemand.setSex(Player obj, int index) {
        Gender sex = genderDataOnDemand.getRandomGender();
        obj.setSex(sex);
    }
    
    public Player PlayerDataOnDemand.getSpecificPlayer(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Player obj = data.get(index);
        String id = obj.getUsername();
        return Player.findPlayer(id);
    }
    
    public Player PlayerDataOnDemand.getRandomPlayer() {
        init();
        Player obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getUsername();
        return Player.findPlayer(id);
    }
    
    public boolean PlayerDataOnDemand.modifyPlayer(Player obj) {
        return false;
    }
    
    public void PlayerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Player.findPlayerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Player' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Player>();
        for (int i = 0; i < 10; i++) {
            Player obj = getNewTransientPlayer(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
