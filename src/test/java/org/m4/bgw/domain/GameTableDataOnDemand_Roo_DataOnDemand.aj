// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.m4.bgw.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.m4.bgw.Boardgame;
import org.m4.bgw.domain.GameTable;
import org.m4.bgw.domain.GameTableDataOnDemand;
import org.m4.bgw.domain.TimeLimit;
import org.m4.bgw.domain.TimeLimitDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect GameTableDataOnDemand_Roo_DataOnDemand {
    
    declare @type: GameTableDataOnDemand: @Component;
    
    private Random GameTableDataOnDemand.rnd = new SecureRandom();
    
    private List<GameTable> GameTableDataOnDemand.data;
    
    @Autowired
    TimeLimitDataOnDemand GameTableDataOnDemand.timeLimitDataOnDemand;
    
    public GameTable GameTableDataOnDemand.getNewTransientGameTable(int index) {
        GameTable obj = new GameTable();
        setBoardgameId(obj, index);
        setCreatedDtm(obj, index);
        setGameEndedDtm(obj, index);
        setGameStartedDtm(obj, index);
        setRated(obj, index);
        setTimeLimitId(obj, index);
        setVideoRecorded(obj, index);
        return obj;
    }
    
    public void GameTableDataOnDemand.setBoardgameId(GameTable obj, int index) {
        Boardgame boardgameId = null;
        obj.setBoardgameId(boardgameId);
    }
    
    public void GameTableDataOnDemand.setCreatedDtm(GameTable obj, int index) {
        Calendar createdDtm = Calendar.getInstance();
        obj.setCreatedDtm(createdDtm);
    }
    
    public void GameTableDataOnDemand.setGameEndedDtm(GameTable obj, int index) {
        Calendar gameEndedDtm = Calendar.getInstance();
        obj.setGameEndedDtm(gameEndedDtm);
    }
    
    public void GameTableDataOnDemand.setGameStartedDtm(GameTable obj, int index) {
        Calendar gameStartedDtm = Calendar.getInstance();
        obj.setGameStartedDtm(gameStartedDtm);
    }
    
    public void GameTableDataOnDemand.setRated(GameTable obj, int index) {
        Boolean rated = true;
        obj.setRated(rated);
    }
    
    public void GameTableDataOnDemand.setTimeLimitId(GameTable obj, int index) {
        TimeLimit timeLimitId = timeLimitDataOnDemand.getRandomTimeLimit();
        obj.setTimeLimitId(timeLimitId);
    }
    
    public void GameTableDataOnDemand.setVideoRecorded(GameTable obj, int index) {
        Boolean videoRecorded = true;
        obj.setVideoRecorded(videoRecorded);
    }
    
    public GameTable GameTableDataOnDemand.getSpecificGameTable(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        GameTable obj = data.get(index);
        Integer id = obj.getGameTableId();
        return GameTable.findGameTable(id);
    }
    
    public GameTable GameTableDataOnDemand.getRandomGameTable() {
        init();
        GameTable obj = data.get(rnd.nextInt(data.size()));
        Integer id = obj.getGameTableId();
        return GameTable.findGameTable(id);
    }
    
    public boolean GameTableDataOnDemand.modifyGameTable(GameTable obj) {
        return false;
    }
    
    public void GameTableDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = GameTable.findGameTableEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'GameTable' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<GameTable>();
        for (int i = 0; i < 10; i++) {
            GameTable obj = getNewTransientGameTable(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
