// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.m4.bgw.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.m4.bgw.domain.GameTable;
import org.m4.bgw.domain.GameTableDataOnDemand;
import org.m4.bgw.domain.Played;
import org.m4.bgw.domain.PlayedDataOnDemand;
import org.m4.bgw.domain.PlayedPK;
import org.m4.bgw.domain.Player;
import org.m4.bgw.domain.PlayerDataOnDemand;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PlayedDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PlayedDataOnDemand: @Component;
    
    private Random PlayedDataOnDemand.rnd = new SecureRandom();
    
    private List<Played> PlayedDataOnDemand.data;
    
    @Autowired
    GameTableDataOnDemand PlayedDataOnDemand.gameTableDataOnDemand;
    
    @Autowired
    PlayerDataOnDemand PlayedDataOnDemand.playerDataOnDemand;
    
    public Played PlayedDataOnDemand.getNewTransientPlayed(int index) {
        Played obj = new Played();
        setEmbeddedIdClass(obj, index);
        setGameTableId(obj, index);
        setScore(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void PlayedDataOnDemand.setEmbeddedIdClass(Played obj, int index) {
        String username = "username_" + index;
        if (username.length() > 20) {
            username = new Random().nextInt(10) + username.substring(1, 20);
        }
        Integer gameTableId = new Integer(index);
        
        PlayedPK embeddedIdClass = new PlayedPK(username, gameTableId);
        obj.setId(embeddedIdClass);
    }
    
    public void PlayedDataOnDemand.setGameTableId(Played obj, int index) {
        GameTable gameTableId = gameTableDataOnDemand.getRandomGameTable();
        obj.setGameTableId(gameTableId);
    }
    
    public void PlayedDataOnDemand.setScore(Played obj, int index) {
        Short score = new Integer(index).shortValue();
        obj.setScore(score);
    }
    
    public void PlayedDataOnDemand.setUsername(Played obj, int index) {
        Player username = playerDataOnDemand.getRandomPlayer();
        obj.setUsername(username);
    }
    
    public Played PlayedDataOnDemand.getSpecificPlayed(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Played obj = data.get(index);
        PlayedPK id = obj.getId();
        return Played.findPlayed(id);
    }
    
    public Played PlayedDataOnDemand.getRandomPlayed() {
        init();
        Played obj = data.get(rnd.nextInt(data.size()));
        PlayedPK id = obj.getId();
        return Played.findPlayed(id);
    }
    
    public boolean PlayedDataOnDemand.modifyPlayed(Played obj) {
        return false;
    }
    
    public void PlayedDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Played.findPlayedEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Played' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Played>();
        for (int i = 0; i < 10; i++) {
            Played obj = getNewTransientPlayed(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
