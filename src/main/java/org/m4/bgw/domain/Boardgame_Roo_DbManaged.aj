// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.m4.bgw.domain;

import java.util.Set;
import javax.persistence.Column;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotNull;
import org.m4.bgw.domain.Achieved;
import org.m4.bgw.domain.AvgGameLength;
import org.m4.bgw.domain.Boardgame;
import org.m4.bgw.domain.ExternalLink;
import org.m4.bgw.domain.GameDesigner;
import org.m4.bgw.domain.GameTable;
import org.m4.bgw.domain.GameTag;
import org.m4.bgw.domain.GameTranslation;
import org.m4.bgw.domain.Player;
import org.m4.bgw.domain.Publisher;

privileged aspect Boardgame_Roo_DbManaged {
    
    @ManyToMany
    @JoinTable(name = "artwork", joinColumns = { @JoinColumn(name = "boardgame_id", nullable = false) }, inverseJoinColumns = { @JoinColumn(name = "game_designer_id", nullable = false) })
    private Set<GameDesigner> Boardgame.gameDesigners;
    
    @ManyToMany
    @JoinTable(name = "autorship", joinColumns = { @JoinColumn(name = "boardgame_id", nullable = false) }, inverseJoinColumns = { @JoinColumn(name = "game_designer_id", nullable = false) })
    private Set<GameDesigner> Boardgame.gameDesigners1;
    
    @ManyToMany
    @JoinTable(name = "has_tag", joinColumns = { @JoinColumn(name = "boardgame_id", nullable = false) }, inverseJoinColumns = { @JoinColumn(name = "tag_name", nullable = false) })
    private Set<GameTag> Boardgame.gameTags2;
    
    @OneToMany(mappedBy = "boardgameId")
    private Set<Achieved> Boardgame.achieveds;
    
    @OneToMany(mappedBy = "boardgameId")
    private Set<AvgGameLength> Boardgame.avgGameLengths;
    
    @OneToMany(mappedBy = "boardgameId")
    private Set<ExternalLink> Boardgame.externalLinks;
    
    @OneToMany(mappedBy = "boardgameId")
    private Set<GameTable> Boardgame.gameTables;
    
    @OneToMany(mappedBy = "boardgameId")
    private Set<GameTranslation> Boardgame.gameTranslations;
    
    @ManyToOne
    @JoinColumn(name = "publisher", referencedColumnName = "name")
    private Publisher Boardgame.publisher;
    
    @ManyToOne
    @JoinColumn(name = "developed_by", referencedColumnName = "username")
    private Player Boardgame.developedBy;
    
    @Column(name = "original_name", length = 50, unique = true)
    @NotNull
    private String Boardgame.originalName;
    
    @Column(name = "publication_year")
    private Short Boardgame.publicationYear;
    
    @Column(name = "players_min")
    @NotNull
    private Short Boardgame.playersMin;
    
    @Column(name = "players_max")
    @NotNull
    private Short Boardgame.playersMax;
    
    @Column(name = "avg_length_minutes")
    @NotNull
    private Short Boardgame.avgLengthMinutes;
    
    @Column(name = "complexity_score")
    @NotNull
    private Short Boardgame.complexityScore;
    
    @Column(name = "strategy_score")
    @NotNull
    private Short Boardgame.strategyScore;
    
    @Column(name = "luck_score")
    @NotNull
    private Short Boardgame.luckScore;
    
    @Column(name = "interaction_score")
    @NotNull
    private Short Boardgame.interactionScore;
    
    @Column(name = "software_version", length = 20)
    @NotNull
    private String Boardgame.softwareVersion;
    
    public Set<GameDesigner> Boardgame.getGameDesigners() {
        return gameDesigners;
    }
    
    public void Boardgame.setGameDesigners(Set<GameDesigner> gameDesigners) {
        this.gameDesigners = gameDesigners;
    }
    
    public Set<GameDesigner> Boardgame.getGameDesigners1() {
        return gameDesigners1;
    }
    
    public void Boardgame.setGameDesigners1(Set<GameDesigner> gameDesigners1) {
        this.gameDesigners1 = gameDesigners1;
    }
    
    public Set<GameTag> Boardgame.getGameTags2() {
        return gameTags2;
    }
    
    public void Boardgame.setGameTags2(Set<GameTag> gameTags2) {
        this.gameTags2 = gameTags2;
    }
    
    public Set<Achieved> Boardgame.getAchieveds() {
        return achieveds;
    }
    
    public void Boardgame.setAchieveds(Set<Achieved> achieveds) {
        this.achieveds = achieveds;
    }
    
    public Set<AvgGameLength> Boardgame.getAvgGameLengths() {
        return avgGameLengths;
    }
    
    public void Boardgame.setAvgGameLengths(Set<AvgGameLength> avgGameLengths) {
        this.avgGameLengths = avgGameLengths;
    }
    
    public Set<ExternalLink> Boardgame.getExternalLinks() {
        return externalLinks;
    }
    
    public void Boardgame.setExternalLinks(Set<ExternalLink> externalLinks) {
        this.externalLinks = externalLinks;
    }
    
    public Set<GameTable> Boardgame.getGameTables() {
        return gameTables;
    }
    
    public void Boardgame.setGameTables(Set<GameTable> gameTables) {
        this.gameTables = gameTables;
    }
    
    public Set<GameTranslation> Boardgame.getGameTranslations() {
        return gameTranslations;
    }
    
    public void Boardgame.setGameTranslations(Set<GameTranslation> gameTranslations) {
        this.gameTranslations = gameTranslations;
    }
    
    public Publisher Boardgame.getPublisher() {
        return publisher;
    }
    
    public void Boardgame.setPublisher(Publisher publisher) {
        this.publisher = publisher;
    }
    
    public Player Boardgame.getDevelopedBy() {
        return developedBy;
    }
    
    public void Boardgame.setDevelopedBy(Player developedBy) {
        this.developedBy = developedBy;
    }
    
    public String Boardgame.getOriginalName() {
        return originalName;
    }
    
    public void Boardgame.setOriginalName(String originalName) {
        this.originalName = originalName;
    }
    
    public Short Boardgame.getPublicationYear() {
        return publicationYear;
    }
    
    public void Boardgame.setPublicationYear(Short publicationYear) {
        this.publicationYear = publicationYear;
    }
    
    public Short Boardgame.getPlayersMin() {
        return playersMin;
    }
    
    public void Boardgame.setPlayersMin(Short playersMin) {
        this.playersMin = playersMin;
    }
    
    public Short Boardgame.getPlayersMax() {
        return playersMax;
    }
    
    public void Boardgame.setPlayersMax(Short playersMax) {
        this.playersMax = playersMax;
    }
    
    public Short Boardgame.getAvgLengthMinutes() {
        return avgLengthMinutes;
    }
    
    public void Boardgame.setAvgLengthMinutes(Short avgLengthMinutes) {
        this.avgLengthMinutes = avgLengthMinutes;
    }
    
    public Short Boardgame.getComplexityScore() {
        return complexityScore;
    }
    
    public void Boardgame.setComplexityScore(Short complexityScore) {
        this.complexityScore = complexityScore;
    }
    
    public Short Boardgame.getStrategyScore() {
        return strategyScore;
    }
    
    public void Boardgame.setStrategyScore(Short strategyScore) {
        this.strategyScore = strategyScore;
    }
    
    public Short Boardgame.getLuckScore() {
        return luckScore;
    }
    
    public void Boardgame.setLuckScore(Short luckScore) {
        this.luckScore = luckScore;
    }
    
    public Short Boardgame.getInteractionScore() {
        return interactionScore;
    }
    
    public void Boardgame.setInteractionScore(Short interactionScore) {
        this.interactionScore = interactionScore;
    }
    
    public String Boardgame.getSoftwareVersion() {
        return softwareVersion;
    }
    
    public void Boardgame.setSoftwareVersion(String softwareVersion) {
        this.softwareVersion = softwareVersion;
    }
    
}
